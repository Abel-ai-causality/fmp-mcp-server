name: API Acceptance Tests

# Only run manually or on a schedule to avoid unexpected API costs
on:
  workflow_dispatch:
    inputs:
      deployment_sha:
        description: 'Commit SHA to test (defaults to latest on main)'
        required: false
  schedule:
    # Run once a week on Monday at 5 AM UTC
    - cron: '0 5 * * 1'

jobs:
  acceptance-tests:
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      deployments: write
    
    steps:
    - name: Get deployment SHA
      id: deployment
      run: |
        if [ -n "${{ github.event.inputs.deployment_sha }}" ]; then
          echo "sha=${{ github.event.inputs.deployment_sha }}" >> $GITHUB_OUTPUT
        else
          # Default to latest commit on main
          echo "sha=$(git ls-remote https://github.com/${{ github.repository }} refs/heads/main | cut -f1)" >> $GITHUB_OUTPUT
        fi
    
    - uses: actions/checkout@v4
      with:
        ref: ${{ steps.deployment.outputs.sha }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run acceptance tests with real API
      env:
        FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
      run: |
        python -m pytest tests/acceptance_tests.py -v --cov=src --cov-report=xml --cov-report=term
    
    # Upload coverage reports
    - name: Upload test results
      if: always() && hashFiles('.coverage') != ''
      uses: actions/upload-artifact@v4
      with:
        name: acceptance-test-results
        path: |
          .coverage
          coverage.xml
        retention-days: 14
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: acceptance-tests
        
    # Create a deployment status based on test result
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = "${{ job.status }}" === "success" ? "success" : "failure";
          
          try {
            // Get deployments
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.deployment.outputs.sha }}",
              environment: "staging"
            });
            
            if (deployments.data.length > 0) {
              const deploymentId = deployments.data[0].id;
              
              // Update the deployment status
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
                state: status,
                description: "Acceptance tests " + (status === "success" ? "passed" : "failed"),
                environment_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
              
              console.log(`Updated deployment status for ${deploymentId} to ${status}`);
            } else {
              console.log(`No deployments found for SHA ${steps.deployment.outputs.sha}`);
            }
          } catch (error) {
            console.error(`Error updating deployment status: ${error.message}`);
          }