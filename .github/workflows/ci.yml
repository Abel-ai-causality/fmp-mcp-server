name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      run: |
        python -m pytest --ignore=tests/acceptance_tests.py --cov=src tests/ --cov-report=xml --cov-report=term
    
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unit-tests

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    # Run integration tests using mock data
    - name: Run integration tests (acceptance tests with mock data)
      env:
        TEST_MODE: "true"
      run: |
        python -m pytest tests/acceptance_tests.py -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: integration-tests

  deployment:
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
      packages: write  # Needed to push to GHCR
      deployments: write # Needed for deployment creation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Image digest
      run: echo "Image has been pushed with digest ${{ steps.docker_build.outputs.digest }}"
      
    # Create a deployment marker that can be used by the acceptance tests
    - name: Create deployment marker
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentInfo = {
            sha: context.sha,
            timestamp: new Date().toISOString(),
            workflow_id: context.runId,
            image: `ghcr.io/${context.repo.owner}/${context.repo.repo}:${context.sha}`
          };
          
          // Create a deployment in the repo's environment
          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'staging',
            auto_merge: false,
            required_contexts: [],
            payload: JSON.stringify(deploymentInfo)
          });